---
const navItems = [
  { name: 'Home', path: '/' },
  { name: 'Products', path: '/products' },
  { name: 'Blog', path: '/blog'},
  { name: 'About', path: '/about' },
  { name: 'Contact', path: '/contact' },
  { name: 'Cart', path: '/cart' }
];

const currentPath = Astro.url.pathname;
---

<header class="fixed w-full z-50 bg-white/90 backdrop-blur-md border-b border-gray-200">
  <nav class="max-w-7xl mx-auto px-4">
    <div class="flex items-center justify-between h-16">
      <a href="/" class="text-xl font-bold tracking-tight px-2">NR</a>

      <!-- Desktop Navigation -->
      <div class="nav-links">
        {navItems.map((item) => (
          <a 
            href={item.path}
            class:list={[
              "text-sm hover:text-gray-900 transition-colors py-2 px-3 rounded-lg",
              currentPath === item.path ? "text-black font-medium bg-gray-50" : "text-gray-600"
            ]}
          >
            {item.name}
            {item.name === 'Cart' && (
              <span id="cart-count" class="ml-1 hidden bg-black text-white text-xs px-1.5 py-0.5 rounded-full">
                0
              </span>
            )}
          </a>
        ))}
      </div>

      <!-- Enhanced Mobile Menu Button -->
      <button 
        type="button" 
        class="block md:hidden p-2 text-gray-600 hover:bg-gray-100 rounded-lg transition-colors" 
        id="mobile-button"
        aria-label="Menu"
      >
        <svg class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
      </button>
    </div>
  </nav>
</header>

<style>
  .nav-links {
    display: flex;
    gap: 1rem;
    margin: 0;
  }

  @media (max-width: 768px) {
    .nav-links {
      display: none;
      position: fixed;
      top: 64px;
      left: 0;
      right: 0;
      background: white;
      padding: 0.75rem;
      flex-direction: column;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      z-index: 40;
      opacity: 0;
      transform: translateY(-10px);
      transition: opacity 0.2s ease-out, transform 0.2s ease-out;
    }

    .nav-links a {
      padding: 0.75rem 1rem;
      border-radius: 0.5rem;
      transition: all 0.2s ease;
    }

    .nav-links a:hover {
      background-color: #f3f4f6;
    }

    .nav-links a:active {
      background-color: #e5e7eb;
    }

    .nav-links.expanded {
      display: flex;
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Mobile menu backdrop */
  @media (max-width: 768px) {
    .nav-links.expanded::before {
      content: '';
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0, 0, 0, 0.3);
      backdrop-filter: blur(4px);
      z-index: -1;
    }
  }
</style>

<script>
  function handleCartCount() {
    const cart = JSON.parse(localStorage.getItem('cart') || '[]');
    const count = cart.reduce((total: number, item: { quantity: number }) => total + item.quantity, 0);
    const cartCount = document.getElementById('cart-count');
    
    if (cartCount) {
      cartCount.textContent = count.toString();
      cartCount.style.display = count > 0 ? 'inline-flex' : 'none';
    }
  }

  document.addEventListener('astro:page-load', () => {
    const button = document.getElementById('mobile-button');
    const navLinks = document.querySelector('.nav-links');

    if (button && navLinks) {
      button.addEventListener('click', () => {
        navLinks.classList.toggle('expanded');
        // Prevent body scroll when menu is open
        document.body.style.overflow = navLinks.classList.contains('expanded') ? 'hidden' : '';
      });

      // Close menu when clicking outside
      document.addEventListener('click', (e) => {
        if (!button.contains(e.target as Node) && 
            !navLinks.contains(e.target as Node) && 
            navLinks.classList.contains('expanded')) {
          navLinks.classList.remove('expanded');
          document.body.style.overflow = '';
        }
      });

      // Close menu when clicking a link
      const links = navLinks.querySelectorAll('a');
      links.forEach(link => {
        link.addEventListener('click', () => {
          navLinks.classList.remove('expanded');
          document.body.style.overflow = '';
        });
      });
    }

    handleCartCount();
  });

  window.addEventListener('cart-updated', handleCartCount);
</script>
